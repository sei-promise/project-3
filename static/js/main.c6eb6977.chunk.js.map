{"version":3,"sources":["store/reducer.js","components/Dropdown.jsx","dropdowns.js","pages/Home.jsx","components/Answers.jsx","pages/Show_Question.jsx","pages/Results.jsx","App.js","serviceWorker.js","index.js"],"names":["initialState","questions","score","answer","correct_number","incorrect_number","reducer","state","action","copyState","type","value","Dropdown","this","props","name","title","options","onChange","className","Label","for","Input","id","map","option","key","text","Component","dropdowns","Home","amount","category","level","e","target","setState","handleClick","apiUrl","generateUrl","sendRequest","axios","get","then","response","data","results","start","history","push","catch","err","console","log","dropdown","index","Button","outline","block","color","onClick","connect","dispatch","withRouter","Answers","selected","clickAnswer","answers","Show_Question","correct_answer","shuffle","arr","i","length","j","Math","floor","random","temp","onNextClick","addScore","incorrect_answers","concat","question_number","questions_len","question","replace","Results","App","path","exact","component","Boolean","window","location","hostname","match","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c6eb6977.chunk.js","sourcesContent":["const initialState = {\r\n  questions: [],\r\n  score: 0,\r\n  answer: \"\",\r\n  correct_number: 0,\r\n  incorrect_number: 0\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  const copyState = { ...state };\r\n  switch (action.type) {\r\n    case \"START\":\r\n      copyState.questions = action.value;\r\n      copyState.score = 0;\r\n      copyState.answer = \"\";\r\n      copyState.correct_number = 0;\r\n      copyState.incorrect_number = 0;\r\n      return copyState;\r\n\r\n    case \"CORRECT\":\r\n      return {\r\n        ...state,\r\n        score: (state.score += 5),\r\n        answer: \"\",\r\n        correct_number: (state.correct_number += 1)\r\n      };\r\n\r\n    case \"INCORRECT_NUMBER\":\r\n      copyState.incorrect_number += 1;\r\n      return copyState;\r\n\r\n    case \"ANSWER\":\r\n      return {\r\n        ...state,\r\n        answer: action.answer\r\n      };\r\n    default:\r\n      return copyState;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import React, { Component } from \"react\";\r\n// Input and Label are components from reactstrap library\r\nimport { Input, Label } from \"reactstrap\";\r\n\r\nclass Dropdown extends Component {\r\n  render() {\r\n    const { name, title, options, onChange } = this.props;\r\n    return (\r\n      <div className=\"dropdown\">\r\n        <Label for={name}>{title}</Label>\r\n        <Input type=\"select\" name={name} id={name} onChange={onChange}>\r\n          {options.map(option => (\r\n            <option key={option.value} value={option.value}>\r\n              {option.text}\r\n            </option>\r\n          ))}\r\n        </Input>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Dropdown;\r\n","const dropdowns = [\r\n  {\r\n    name: \"amount\",\r\n    title: \"Number Of Questions\",\r\n    options: [\r\n      {\r\n        value: 5,\r\n        text: \"5\"\r\n      },\r\n      {\r\n        value: 10,\r\n        text: \"10\"\r\n      },\r\n      {\r\n        value: 15,\r\n        text: \"15\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    name: \"category\",\r\n    title: \"Choose Category\",\r\n    options: [\r\n      { value: \"any\", text: \"Any Category\" },\r\n      { value: \"9\", text: \"General Knowledge\" },\r\n      { value: \"10\", text: \"Entertainment: Books\" },\r\n      { value: \"11\", text: \"Entertainment: Film\" },\r\n      { value: \"12\", text: \"Entertainment: Music\" },\r\n      { value: \"13\", text: \"Entertainment: Musicals & Theatres\" },\r\n      { value: \"14\", text: \"Entertainment: Television\" },\r\n      { value: \"15\", text: \"Entertainment: Video Games\" },\r\n      { value: \"16\", text: \"Entertainment: Board Games\" },\r\n      { value: \"17\", text: \"Science & Nature\" },\r\n      { value: \"18\", text: \"Science: Computers\" },\r\n      { value: \"19\", text: \"Science: Mathematics\" },\r\n      { value: \"20\", text: \"Mythology\" },\r\n      { value: \"21\", text: \"Sports\" },\r\n      { value: \"22\", text: \"Geography\" },\r\n      { value: \"23\", text: \"History\" },\r\n      { value: \"24\", text: \"Politics\" },\r\n      { value: \"25\", text: \"Art\" },\r\n      { value: \"26\", text: \"Celebrities\" },\r\n      { value: \"27\", text: \"Animals\" },\r\n      { value: \"28\", text: \"Vehicles\" },\r\n      { value: \"29\", text: \"Entertainment: Comics\" },\r\n      { value: \"30\", text: \"Science: Gadgets\" },\r\n      { value: \"31\", text: \"Entertainment: Japanese Anime & Manga\" },\r\n      { value: \"32\", text: \"Entertainment: Cartoon & Animations\" }\r\n    ]\r\n  },\r\n  {\r\n    name: \"level\",\r\n    title: \"Choose Difficulty\",\r\n    options: [\r\n      {\r\n        value: \"any\",\r\n        text: \"Any Difficulty\"\r\n      },\r\n      {\r\n        value: \"easy\",\r\n        text: \"Easy\"\r\n      },\r\n      {\r\n        value: \"medium\",\r\n        text: \"Medium\"\r\n      },\r\n      {\r\n        value: \"hard\",\r\n        text: \"hard\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    name: \"type\",\r\n    title: \"Choose The Questions Type\",\r\n    options: [\r\n      {\r\n        value: \"any\",\r\n        text: \"Any\"\r\n      },\r\n      {\r\n        value: \"multiple\",\r\n        text: \"Multiple\"\r\n      },\r\n      {\r\n        value: \"boolean\",\r\n        text: \"True / False\"\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\nexport default dropdowns;\r\n","import React, { Component } from \"react\";\r\nimport Dropdown from \"../components/Dropdown\";\r\nimport dropdowns from \"../dropdowns\";\r\nimport { Button } from \"reactstrap\";\r\nimport axios from \"axios\";\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nclass Home extends Component {\r\n  state = {\r\n    amount: 5, // default value for number of questions\r\n    category: \"any\", // default value for category the api will choose random categories for the questions\r\n    level: \"any\", // default value for difficulty the api will choose random level for the questions\r\n    type: \"multiple\", // default value for the type of questions\r\n    dropdowns: dropdowns // dropdowns values to render all of the dropdowns dynamically\r\n  };\r\n\r\n  // this will run when the user click on the dropdown and change the value\r\n  onChange = e => {\r\n    const { name, value } = e.target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  // this will run when the user clicked on Start Button\r\n  handleClick = () => {\r\n    const apiUrl = this.generateUrl();\r\n    this.sendRequest(apiUrl);\r\n  };\r\n\r\n  // this will generate the api url based on what user choose from the dropdowns\r\n  generateUrl = () => {\r\n    const { amount, category, level, type } = this.state;\r\n\r\n    let apiUrl = `https://opentdb.com/api.php?amount=${amount}&type=${type}`;\r\n\r\n    if (category !== \"any\") {\r\n      apiUrl += `&category=${category}`;\r\n    }\r\n\r\n    if (level !== \"any\") {\r\n      apiUrl += `&Difficulty=${level}`;\r\n    }\r\n\r\n    return apiUrl;\r\n  };\r\n\r\n  // this will send request to the api and\r\n  // dispatch action called \"START\"\r\n  // go to -> src/store/reducer to read more about it\r\n  sendRequest = apiUrl => {\r\n    axios\r\n      .get(apiUrl)\r\n      .then(response => {\r\n        const questions = response.data.results;\r\n        this.props.start(questions);\r\n        this.props.history.push(\"/questions\"); // go to first index in the questions index\r\n      })\r\n      .catch(err => console.log(err));\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"flex  flex-column h-100\">\r\n        <div className=\"container h-100 flex flex-column justify-content-center w-500px\">\r\n          <div className=\"bg-white p-5 rounded\">\r\n            {/* looping over the dropdowns */}\r\n            {this.state.dropdowns.map((dropdown, index) => (\r\n              <Dropdown\r\n                key={index}\r\n                name={dropdown.name}\r\n                title={dropdown.title}\r\n                options={dropdown.options}\r\n                onChange={this.onChange}\r\n              />\r\n            ))}\r\n            <br />\r\n            <Button\r\n              outline={true}\r\n              block={true}\r\n              color=\"primary\"\r\n              onClick={this.handleClick}\r\n            >\r\n              Start Game\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    start: questions => dispatch({ type: \"START\", value: questions })\r\n  };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(withRouter(Home));\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass Answers extends Component {\r\n  state = {\r\n    selected: 0\r\n  };\r\n\r\n  handleClick = (answer, index) => {\r\n    this.props.clickAnswer(answer);\r\n    // this is not good because we are re-rendering the whole component on each click on the answer\r\n    // TODO: mpve selected to store/reducer\r\n    this.setState({ selected: index });\r\n  };\r\n\r\n  render() {\r\n    return this.props.answers.map((answer, index) => {\r\n      return (\r\n        <div\r\n          className={`clickable${\r\n            this.state.selected === index ? \" selected\" : \"\"\r\n          }`}\r\n          onClick={() => this.handleClick(answer, index)}\r\n          key={index}\r\n        >\r\n          <strong>{answer}</strong>\r\n          <hr />\r\n        </div>\r\n      );\r\n    });\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    clickAnswer: answer => dispatch({ type: \"ANSWER\", answer: answer })\r\n  };\r\n};\r\nexport default connect(null, mapDispatchToProps)(Answers);\r\n","import React, { Component } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport Answers from \"../components/Answers\";\r\nimport { Button } from \"reactstrap\";\r\n\r\nclass Show_Question extends Component {\r\n  state = {\r\n    answers: [], // collection of answers both correct & incorrects\r\n    id: 0, // start from the first question\r\n    correct_answer: \"\" // this will hold the correct_answer from the question object\r\n  };\r\n\r\n  // this function will randomize the whole array\r\n  shuffle = arr => {\r\n    for (let i = 0; i < arr.length; i++) {\r\n      const j = Math.floor(Math.random() * arr.length);\r\n      let temp = arr[i];\r\n      arr[i] = arr[j];\r\n      arr[j] = temp;\r\n    }\r\n    return arr;\r\n  };\r\n\r\n  // this will get the current question based on this.state.id\r\n  componentDidMount() {\r\n    if (this.props.questions.length === 0) {\r\n      this.props.history.push(\"/\");\r\n      return false;\r\n    }\r\n\r\n    // get correct_answer and incorrect_answer from the question object\r\n    const { correct_answer, incorrect_answers } = this.props.questions[\r\n      this.state.id\r\n    ];\r\n    // print the two variables\r\n    // console.log(correct_answer, incorrect_answers);\r\n    // update the state\r\n    this.setState(({ ...copyState }) => {\r\n      // 1. concat the correct_answer with incorrect_answers\r\n      const answers = incorrect_answers.concat(correct_answer);\r\n      // 2. randomize the answers array at the first time\r\n      // and set the answers to the new answers array\r\n      copyState.answers = this.shuffle(answers);\r\n      // 3. set the correct_answer in the state\r\n      copyState.correct_answer = correct_answer;\r\n      // 4. return the new state\r\n      return copyState;\r\n    });\r\n  }\r\n\r\n  // this will run when the user clicks on the next button\r\n  onNextClick = () => {\r\n    // 1. check if user answer is equal to the correct_answer\r\n    if (this.props.answer === this.state.correct_answer) {\r\n      this.props.addScore(); // if so then add score\r\n    } else {\r\n      this.props.incorrect_number();\r\n    }\r\n\r\n    // TODO: check if id greater than or equal to questions.length - 1 => go to /results page\r\n    if (this.state.id >= this.props.questions.length - 1) {\r\n      this.props.history.push(\"/results\");\r\n      return true;\r\n    }\r\n\r\n    // 2. update the state\r\n    this.setState(({ ...copyState }) => {\r\n      // 1. add one to the id\r\n      copyState.id += 1;\r\n\r\n      // 2. get correct_answer and incorrect_answer from the second or the third question object\r\n      // question object will come based on the state.id\r\n      const { correct_answer, incorrect_answers } = this.props.questions[\r\n        copyState.id\r\n      ];\r\n\r\n      // 3. concat the correct_answer with incorrect_answers\r\n      const answers = incorrect_answers.concat(correct_answer);\r\n\r\n      // 4. randomize the answers array again\r\n      // and change the answers to the new answers array\r\n      copyState.answers = this.shuffle(answers);\r\n\r\n      // 5. change the correct_answer in the state\r\n      copyState.correct_answer = correct_answer;\r\n\r\n      // 6. return the new state\r\n      return copyState;\r\n    });\r\n  };\r\n  render() {\r\n    // check if there's answers\r\n    // true => render jsx\r\n    // false => return null\r\n    const question_number = this.state.id + 1;\r\n    const questions_len = this.props.questions.length;\r\n    const content = this.state.answers.length ? (\r\n      <div className=\"flex  flex-column h-100\">\r\n        <div className=\"container h-100 flex flex-column justify-content-center w-500px\">\r\n          <div className=\"bg-white p-5 rounded\">\r\n            <div className=\"flex align-items-center justify-content-between mb-2\">\r\n              <div>\r\n                <h5>\r\n                  Question: {question_number} out of {questions_len}{\" \"}\r\n                </h5>\r\n              </div>\r\n              <div>\r\n                <h5>Score: +{this.props.score}</h5>\r\n              </div>\r\n            </div>\r\n            <h4>\r\n              {this.props.questions[this.state.id].question.replace(\r\n                /&quot;/gi,\r\n                \"\"\r\n              )}\r\n            </h4>\r\n            <br />\r\n            <Answers answers={this.state.answers} />\r\n            <br />\r\n            {/* <button onClick={this.onNextClick}>NEXT</button> */}\r\n            <Button block={true} color=\"warning\" onClick={this.onNextClick}>\r\n              NEXT\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    ) : null;\r\n    return content;\r\n  }\r\n}\r\n\r\n// get the questions, answer, score from redux\r\nconst mapStateToProps = state => {\r\n  return {\r\n    questions: state.questions,\r\n    answer: state.answer,\r\n    score: state.score\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    addScore: () => dispatch({ type: \"CORRECT\" }),\r\n    incorrect_number: () => dispatch({ type: \"INCORRECT_NUMBER\" })\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withRouter(Show_Question));\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { Button } from \"reactstrap\";\r\n\r\nclass Results extends Component {\r\n  handleClick = () => {\r\n    this.props.history.replace(\"/\");\r\n  };\r\n\r\n  render() {\r\n    const { score, correct_number, incorrect_number } = this.props;\r\n    return (\r\n      <div className=\"flex  flex-column h-100\">\r\n        <div className=\"container h-100 flex flex-column justify-content-center w-500px\">\r\n          <div className=\"bg-white p-5 rounded\">\r\n            <h1>Results</h1>\r\n            <hr />\r\n\r\n            <h3>Score: +{score} </h3>\r\n            <h4 className=\"green\">\r\n              Correct Questions Number: {correct_number}{\" \"}\r\n            </h4>\r\n            <h4 className=\"red\">\r\n              Incorrect Questions Number: {incorrect_number}{\" \"}\r\n            </h4>\r\n\r\n            <br />\r\n            <Button\r\n              onClick={this.handleClick}\r\n              color=\"primary\"\r\n              outline={true}\r\n              block={true}\r\n            >\r\n              Start Again\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    score: state.score,\r\n    correct_number: state.correct_number,\r\n    incorrect_number: state.incorrect_number\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(withRouter(Results));\r\n","import React from \"react\";\r\nimport { Route } from \"react-router-dom\";\r\nimport Home from \"./pages/Home\";\r\nimport Show_Question from \"./pages/Show_Question\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Results from \"./pages/Results\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App h-100\">\r\n      <Route path=\"/\" exact component={Home} />\r\n      <Route path=\"/questions\" exact component={Show_Question} />\r\n      <Route path=\"/results\" exact component={Results} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { createStore } from \"redux\";\r\nimport { Provider } from \"react-redux\";\r\nimport reducer from \"./store/reducer\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport \"./index.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nconst store = createStore(reducer);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}